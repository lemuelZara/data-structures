O que é a notação BigO?
    - Falamos em BigO quando queremos entender:
        - quanto tempo um algoritmo leva para ser executado (Time Complexity);
        - quanta memória é usada por esse algoritmo (Space Complexity);
    - Essa notação foca em encontrar o melhor e o pior tempo médio de execução de um algoritmo.
    - Big O says which function, algorithm or code is best.
    - Big O is used to describe how efficient we can run our code.
    - We're always looking at the worst case scenario.

    - Ao usar a notação, devemos ter em mente que:
        - O tempo de execução não é equivalente ao tempo que conhecemos (segundos, milissegundos, microssegundos, etc) Já que esse
        "tempo" pode ser diferentes se levarmos em conta aspectos como processador, linguagem, ambiente de execução, entre ouras coisas
        - O tempo de execução é entendido como o número de operações ou etapas necessárias para concluir um problema de tamanho N.

    - Keep this is mind, Big O doesn't measure things in seconds. Instead, we're focusing on **how quickly our runtime grows**.

o log n
 - normalmente encontrada em estrutura de dados do tipo árvore e em algoritmos de busca binária.
 - o ponto chave dessa notação é que não é necessário percorrer toda uma lista para encontrar
 determinado valor, em vez disso, podemos dividir a lista em 2 até encontrar o que precisamos.

non-dominant terms
 - removemos termos menores dentro do escopo do algoritmo que estamos lidando,
 - ficamos só com aquele que é o pior dentre todos
